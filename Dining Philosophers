3. Dining Philosophers 
#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

#define N 5
sem_t forks[N];

void *philosopher(void *num) {
    int id = *(int *)num;
    sem_wait(&forks[id]);
    sem_wait(&forks[(id + 1) % N]);
    printf("Philosopher %d is eating\n", id);
    sem_post(&forks[id]);
    sem_post(&forks[(id + 1) % N]);
    return NULL;
}

int main() {
    pthread_t phil[N];
    int ids[N];
    for (int i = 0; i < N; i++) sem_init(&forks[i], 0, 1);
    for (int i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&phil[i], NULL, philosopher, &ids[i]);
    }
    for (int i = 0; i < N; i++) pthread_join(phil[i], NULL);
    return 0;
}
